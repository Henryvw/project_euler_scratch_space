var search_data = {"index":{"searchIndex":["absolutevalue","cat","dog","engine","fibonaccicalculator","henry","henrysson","motorboat","object","simplefibonaccicalculator","vanwagenberg","vehicle","add_past_two()","break_word_into_characters()","count_and_calculate()","engine_lights()","fancy_pants()","find_evens()","find_max_in()","for_counter()","generate_below_four_million()","generate_using_recursion()","group_of_bros()","is_palindrome?()","make_noise()","make_noise()","name_the_boat()","new()","new()","output_fib_history()","positivize()","print_license_plate()","print_license_plate()","recursive_base_case()","select_integers_multiples_of_3_or_5()","shout()","shout()","sort_with_binary_sort()","sort_with_inefficient_selection_sort()","start_engine()","start_engine()","sum_list()","summed()"],"longSearchIndex":["absolutevalue","cat","dog","engine","fibonaccicalculator","henry","henrysson","motorboat","object","simplefibonaccicalculator","vanwagenberg","vehicle","simplefibonaccicalculator#add_past_two()","object#break_word_into_characters()","simplefibonaccicalculator#count_and_calculate()","engine::engine_lights()","henry#fancy_pants()","fibonaccicalculator#find_evens()","object#find_max_in()","object#for_counter()","fibonaccicalculator#generate_below_four_million()","fibonaccicalculator#generate_using_recursion()","object#group_of_bros()","object#is_palindrome?()","cat#make_noise()","dog#make_noise()","motorboat#name_the_boat()","henry::new()","vehicle::new()","simplefibonaccicalculator#output_fib_history()","absolutevalue#positivize()","motorboat#print_license_plate()","vehicle#print_license_plate()","fibonaccicalculator#recursive_base_case()","object#select_integers_multiples_of_3_or_5()","henrysson#shout()","vanwagenberg#shout()","object#sort_with_binary_sort()","object#sort_with_inefficient_selection_sort()","engine#start_engine()","vehicle#start_engine()","fibonaccicalculator#sum_list()","fibonaccicalculator#summed()"],"info":[["AbsoluteValue","","AbsoluteValue.html","",""],["Cat","","Cat.html","","<p>Polymorphism\n"],["Dog","","Dog.html","",""],["Engine","","Engine.html","",""],["FibonacciCalculator","","FibonacciCalculator.html","",""],["Henry","","Henry.html","","<p>require “pry”\n"],["HenrysSon","","HenrysSon.html","",""],["MotorBoat","","MotorBoat.html","",""],["Object","","Object.html","",""],["SimpleFibonacciCalculator","","SimpleFibonacciCalculator.html","",""],["VanWagenberg","","VanWagenberg.html","",""],["Vehicle","","Vehicle.html","",""],["add_past_two","SimpleFibonacciCalculator","SimpleFibonacciCalculator.html#method-i-add_past_two","(f1, f2)",""],["break_word_into_characters","Object","Object.html#method-i-break_word_into_characters","(word)",""],["count_and_calculate","SimpleFibonacciCalculator","SimpleFibonacciCalculator.html#method-i-count_and_calculate","(my_number)",""],["engine_lights","Engine","Engine.html#method-c-engine_lights","()",""],["fancy_pants","Henry","Henry.html#method-i-fancy_pants","()",""],["find_evens","FibonacciCalculator","FibonacciCalculator.html#method-i-find_evens","(list)",""],["find_max_in","Object","Object.html#method-i-find_max_in","(list)",""],["for_counter","Object","Object.html#method-i-for_counter","(x)",""],["generate_below_four_million","FibonacciCalculator","FibonacciCalculator.html#method-i-generate_below_four_million","(first_fibonacci, second_fibonacci)",""],["generate_using_recursion","FibonacciCalculator","FibonacciCalculator.html#method-i-generate_using_recursion","(first_fibonacci, second_fibonacci, limit)",""],["group_of_bros","Object","Object.html#method-i-group_of_bros","(greeting, *bros)","<p>henry.stub(:fancy_pants).and_return(henrys_stubbed_value)\n"],["is_palindrome?","Object","Object.html#method-i-is_palindrome-3F","(character)","<p>Notes: What is the base case? Always ask this question in recursion! I hate\nto ask this question, because …\n"],["make_noise","Cat","Cat.html#method-i-make_noise","()",""],["make_noise","Dog","Dog.html#method-i-make_noise","()",""],["name_the_boat","MotorBoat","MotorBoat.html#method-i-name_the_boat","(name)",""],["new","Henry","Henry.html#method-c-new","()",""],["new","Vehicle","Vehicle.html#method-c-new","()",""],["output_fib_history","SimpleFibonacciCalculator","SimpleFibonacciCalculator.html#method-i-output_fib_history","(given_number)","<p>Below are\n"],["positivize","AbsoluteValue","AbsoluteValue.html#method-i-positivize","(number)",""],["print_license_plate","MotorBoat","MotorBoat.html#method-i-print_license_plate","()",""],["print_license_plate","Vehicle","Vehicle.html#method-i-print_license_plate","()",""],["recursive_base_case","FibonacciCalculator","FibonacciCalculator.html#method-i-recursive_base_case","(first_fibonacci, second_fibonacci, limit)",""],["select_integers_multiples_of_3_or_5","Object","Object.html#method-i-select_integers_multiples_of_3_or_5","(raw_array_of_integers, new_array_3_and_5)",""],["shout","HenrysSon","HenrysSon.html#method-i-shout","(words)",""],["shout","VanWagenberg","VanWagenberg.html#method-i-shout","(words)",""],["sort_with_binary_sort","Object","Object.html#method-i-sort_with_binary_sort","(list)",""],["sort_with_inefficient_selection_sort","Object","Object.html#method-i-sort_with_inefficient_selection_sort","(list)",""],["start_engine","Engine","Engine.html#method-i-start_engine","()",""],["start_engine","Vehicle","Vehicle.html#method-i-start_engine","()",""],["sum_list","FibonacciCalculator","FibonacciCalculator.html#method-i-sum_list","(numbers)",""],["summed","FibonacciCalculator","FibonacciCalculator.html#method-i-summed","()",""]]}}